// <auto-generated />
using Goldmint.Common;
using Goldmint.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Goldmint.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180821170355_promo-codes-fix")]
    partial class promocodesfix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Goldmint.DAL.Models.BannedCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(3);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(512);

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_banned_country");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.BuyGoldRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("EthAddress")
                        .IsRequired()
                        .HasColumnName("eth_address")
                        .HasMaxLength(128);

                    b.Property<int>("ExchangeCurrency")
                        .HasColumnName("exchange_currency");

                    b.Property<long>("GoldRateCents")
                        .HasColumnName("gold_rate");

                    b.Property<int>("Input")
                        .HasColumnName("input");

                    b.Property<string>("InputExpected")
                        .IsRequired()
                        .HasColumnName("input_expected")
                        .HasMaxLength(64);

                    b.Property<long>("InputRateCents")
                        .HasColumnName("input_rate");

                    b.Property<string>("OplogId")
                        .IsRequired()
                        .HasColumnName("oplog_id")
                        .HasMaxLength(32);

                    b.Property<int>("Output")
                        .HasColumnName("output");

                    b.Property<long?>("PromoCodeId")
                        .HasColumnName("promo_code_id");

                    b.Property<long?>("RelInputId")
                        .HasColumnName("rel_input_id");

                    b.Property<long>("RelUserFinHistoryId")
                        .HasColumnName("rel_user_finhistory");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeExpires")
                        .HasColumnName("time_expires");

                    b.Property<DateTime>("TimeNextCheck")
                        .HasColumnName("time_next_check");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("RelUserFinHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_buy_gold_request");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.CreditCardPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmountCents")
                        .HasColumnName("amount");

                    b.Property<long>("CardId")
                        .HasColumnName("card_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(32);

                    b.Property<int>("Currency")
                        .HasColumnName("currency");

                    b.Property<string>("GwTransactionId")
                        .IsRequired()
                        .HasColumnName("gw_transaction_id")
                        .HasMaxLength(64);

                    b.Property<string>("OplogId")
                        .IsRequired()
                        .HasColumnName("oplog_id")
                        .HasMaxLength(32);

                    b.Property<string>("ProviderMessage")
                        .HasColumnName("provider_message")
                        .HasMaxLength(512);

                    b.Property<string>("ProviderStatus")
                        .HasColumnName("provider_status")
                        .HasMaxLength(64);

                    b.Property<long?>("RelPaymentId")
                        .HasColumnName("rel_payment_id");

                    b.Property<long?>("RelatedExchangeRequestId")
                        .HasColumnName("rel_request_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeNextCheck")
                        .HasColumnName("time_next_check");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnName("transaction_id")
                        .HasMaxLength(32);

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("RelPaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_ccard_payment");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.EthereumOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CentsAmount")
                        .HasColumnName("cents_amount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(128);

                    b.Property<string>("EthRequestIndex")
                        .HasColumnName("eth_request_index")
                        .HasMaxLength(64);

                    b.Property<string>("EthTransactionId")
                        .HasColumnName("eth_txid")
                        .HasMaxLength(66);

                    b.Property<string>("GoldAmount")
                        .IsRequired()
                        .HasColumnName("gold_amount")
                        .HasMaxLength(64);

                    b.Property<string>("OplogId")
                        .IsRequired()
                        .HasColumnName("oplog_id")
                        .HasMaxLength(32);

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnName("rate")
                        .HasMaxLength(64);

                    b.Property<long>("RelUserFinHistoryId")
                        .HasColumnName("rel_user_finhistory");

                    b.Property<long?>("RelatedExchangeRequestId")
                        .HasColumnName("rel_request_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeNextCheck")
                        .HasColumnName("time_next_check");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RelUserFinHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_eth_operation");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("gm_role");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasMaxLength(256);

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("gm_role_claim");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<long>("AccessRights")
                        .HasColumnName("access_rights");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("JwtSaltCabinet")
                        .IsRequired()
                        .HasColumnName("jwt_salt_cab")
                        .HasMaxLength(64);

                    b.Property<string>("JwtSaltDashboard")
                        .IsRequired()
                        .HasColumnName("jwt_salt_dbr")
                        .HasMaxLength(64);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_username")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasMaxLength(512);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(64);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("TfaSecret")
                        .IsRequired()
                        .HasColumnName("tfa_secret")
                        .HasMaxLength(32);

                    b.Property<DateTime>("TimeRegistered")
                        .HasColumnName("time_registered");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("tfa_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("gm_user");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasMaxLength(256);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_claim");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasMaxLength(64);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_login");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("gm_user_role");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("gm_user_token");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.KycTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallbackMessage")
                        .HasColumnName("callback_message")
                        .HasMaxLength(128);

                    b.Property<string>("CallbackStatusCode")
                        .HasColumnName("callback_status_code")
                        .HasMaxLength(32);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnName("country_code")
                        .HasMaxLength(2);

                    b.Property<DateTime>("DoB")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(64);

                    b.Property<bool>("IsVerified")
                        .HasColumnName("is_verified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(64);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnName("method")
                        .HasMaxLength(32);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasMaxLength(32);

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnName("reference_id")
                        .HasMaxLength(32);

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeResponded")
                        .HasColumnName("time_responed");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_kyc_shuftipro_ticket");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Mutex", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Expires")
                        .IsConcurrencyToken()
                        .HasColumnName("expires");

                    b.Property<string>("Locker")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("locker")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("gm_mutex");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeToSend")
                        .HasColumnName("time_to_send");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("gm_notification");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.PromoCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeExpires")
                        .HasColumnName("time_expires");

                    b.Property<DateTime?>("TimeUsed")
                        .HasColumnName("time_used");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("decimal(38, 18)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_promo_code");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.SellGoldRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("EthAddress")
                        .IsRequired()
                        .HasColumnName("eth_address")
                        .HasMaxLength(128);

                    b.Property<int>("ExchangeCurrency")
                        .HasColumnName("exchange_currency");

                    b.Property<long>("GoldRateCents")
                        .HasColumnName("gold_rate");

                    b.Property<int>("Input")
                        .HasColumnName("input");

                    b.Property<string>("InputExpected")
                        .IsRequired()
                        .HasColumnName("input_expected")
                        .HasMaxLength(64);

                    b.Property<string>("OplogId")
                        .IsRequired()
                        .HasColumnName("oplog_id")
                        .HasMaxLength(32);

                    b.Property<int>("Output")
                        .HasColumnName("output");

                    b.Property<long>("OutputRateCents")
                        .HasColumnName("output_rate");

                    b.Property<long?>("RelOutputId")
                        .HasColumnName("rel_output_id");

                    b.Property<long>("RelUserFinHistoryId")
                        .HasColumnName("rel_user_finhistory");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeExpires")
                        .HasColumnName("time_expires");

                    b.Property<DateTime>("TimeNextCheck")
                        .HasColumnName("time_next_check");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RelUserFinHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_sell_gold_request");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasMaxLength(16384);

                    b.HasKey("Id");

                    b.ToTable("gm_settings");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.SignedDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallbackEvent")
                        .HasColumnName("callback_event_type")
                        .HasMaxLength(64);

                    b.Property<string>("CallbackStatus")
                        .HasColumnName("callback_status")
                        .HasMaxLength(16);

                    b.Property<bool>("IsSigned")
                        .HasColumnName("is_signed");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnName("reference_id")
                        .HasMaxLength(32);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnName("secret")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_signed_document");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Transparency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnName("amount")
                        .HasMaxLength(512);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(512);

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasMaxLength(128);

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_transparency");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.TransparencyStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetsArray")
                        .IsRequired()
                        .HasColumnName("assets")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("AuditTimestamp")
                        .HasColumnName("audit_timestamp");

                    b.Property<string>("BondsArray")
                        .IsRequired()
                        .HasColumnName("bonds")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("DataTimestamp")
                        .HasColumnName("data_timestamp");

                    b.Property<string>("FiatArray")
                        .IsRequired()
                        .HasColumnName("fiat")
                        .HasMaxLength(2048);

                    b.Property<string>("GoldArray")
                        .IsRequired()
                        .HasColumnName("gold")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<string>("TotalOz")
                        .IsRequired()
                        .HasColumnName("total_oz")
                        .HasMaxLength(128);

                    b.Property<string>("TotalUsd")
                        .IsRequired()
                        .HasColumnName("total_usd")
                        .HasMaxLength(128);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_transparency_stat");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnName("agent")
                        .HasMaxLength(128);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(512);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasMaxLength(32);

                    b.Property<int?>("Locale")
                        .HasColumnName("locale");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(32);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_activity");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserCreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardMask")
                        .HasColumnName("mask")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(32);

                    b.Property<string>("GwInitialDepositCardTransactionId")
                        .HasColumnName("gw_deposit_card_tid")
                        .HasMaxLength(64);

                    b.Property<string>("GwInitialWithdrawCardTransactionId")
                        .HasColumnName("gw_withdraw_card_tid")
                        .HasMaxLength(64);

                    b.Property<string>("HolderName")
                        .HasColumnName("holder_name")
                        .HasMaxLength(128);

                    b.Property<int>("State")
                        .HasColumnName("state");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("VerificationAmountCents")
                        .HasColumnName("verification_amount");

                    b.Property<int>("VerificationAttempt")
                        .HasColumnName("verification_attempt");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_ccard");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserFinHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(512);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("Destination")
                        .HasColumnName("destination")
                        .HasMaxLength(128);

                    b.Property<string>("DestinationAmount")
                        .HasColumnName("destination_amount")
                        .HasMaxLength(64);

                    b.Property<string>("OplogId")
                        .IsRequired()
                        .HasColumnName("oplog_id")
                        .HasMaxLength(32);

                    b.Property<string>("RelEthTransactionId")
                        .HasColumnName("rel_eth_transaction_id")
                        .HasMaxLength(66);

                    b.Property<long?>("RelUserActivityId")
                        .HasColumnName("rel_user_activity");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasMaxLength(128);

                    b.Property<string>("SourceAmount")
                        .HasColumnName("source_amount")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeExpires")
                        .HasColumnName("time_expires");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RelUserActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_finhistory");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserLimits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("EthDeposited")
                        .HasColumnName("eth_deposited")
                        .HasColumnType("decimal(38, 18)");

                    b.Property<decimal>("EthWithdrawn")
                        .HasColumnName("eth_withdrawn")
                        .HasColumnType("decimal(38, 18)");

                    b.Property<long>("FiatDeposited")
                        .HasColumnName("fiat_deposited");

                    b.Property<long>("FiatWithdrawn")
                        .HasColumnName("fiat_withdrawn");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_limits");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserOpLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasMaxLength(512);

                    b.Property<long?>("RefId")
                        .HasColumnName("ref_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnName("time_created");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RefId");

                    b.HasIndex("UserId");

                    b.ToTable("gm_user_oplog");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasMaxLength(64);

                    b.Property<long?>("DpaDocumentId")
                        .HasColumnName("dpa_document_id");

                    b.Property<DateTime?>("HotWalletBuyingLastTime")
                        .HasColumnName("hw_buying_stamp");

                    b.Property<DateTime?>("HotWalletSellingLastTime")
                        .HasColumnName("hw_selling_stamp");

                    b.Property<DateTime?>("HotWalletTransferLastTime")
                        .HasColumnName("hw_transfer_stamp");

                    b.Property<bool>("InitialTfaQuest")
                        .HasColumnName("init_tfa_quest");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DpaDocumentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("gm_user_options");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserVerification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AgreedWithTos")
                        .HasColumnName("tos_agreed");

                    b.Property<string>("Apartment")
                        .HasColumnName("apartment")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(256);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(64);

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DoB")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(64);

                    b.Property<long?>("KycLastTicketId")
                        .HasColumnName("last_kyc_ticket_id");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(64);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(32);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(16);

                    b.Property<bool?>("ProvedResidence")
                        .HasColumnName("proved_residence");

                    b.Property<string>("ProvedResidenceComment")
                        .HasColumnName("proved_residence_comment")
                        .HasMaxLength(512);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(256);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("TimeUserChanged")
                        .HasColumnName("time_user_changed");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("KycLastTicketId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("gm_user_verification");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.BannedCountry", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.BuyGoldRequest", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("Goldmint.DAL.Models.UserFinHistory", "RelUserFinHistory")
                        .WithMany()
                        .HasForeignKey("RelUserFinHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.CreditCardPayment", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.UserCreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Goldmint.DAL.Models.CreditCardPayment", "RefPayment")
                        .WithMany()
                        .HasForeignKey("RelPaymentId");

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.EthereumOperation", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.UserFinHistory", "RelUserFinHistory")
                        .WithMany()
                        .HasForeignKey("RelUserFinHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserRole", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Goldmint.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Identity.UserToken", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.KycTicket", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.PromoCode", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Goldmint.DAL.Models.SellGoldRequest", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.UserFinHistory", "RelUserFinHistory")
                        .WithMany()
                        .HasForeignKey("RelUserFinHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.SignedDocument", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.Transparency", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.TransparencyStat", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserActivity", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserCreditCard", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserFinHistory", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.UserActivity", "RelUserActivity")
                        .WithMany()
                        .HasForeignKey("RelUserActivityId");

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserLimits", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserOpLog", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.UserOpLog", "Ref")
                        .WithMany()
                        .HasForeignKey("RefId");

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserOptions", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.SignedDocument", "DpaDocument")
                        .WithMany()
                        .HasForeignKey("DpaDocumentId");

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithOne("UserOptions")
                        .HasForeignKey("Goldmint.DAL.Models.UserOptions", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Goldmint.DAL.Models.UserVerification", b =>
                {
                    b.HasOne("Goldmint.DAL.Models.KycTicket", "LastKycTicket")
                        .WithMany()
                        .HasForeignKey("KycLastTicketId");

                    b.HasOne("Goldmint.DAL.Models.Identity.User", "User")
                        .WithOne("UserVerification")
                        .HasForeignKey("Goldmint.DAL.Models.UserVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
